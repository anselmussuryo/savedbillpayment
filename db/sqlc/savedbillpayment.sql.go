// Code generated by sqlc. DO NOT EDIT.
// source: savedbillpayment.sql

package db

import (
	"context"
	"database/sql"
)

const createSavedBillPayment = `-- name: CreateSavedBillPayment :execresult
INSERT INTO saved_bill_payment (
  merchant_id,
  customer_id,
  subsciber_no,
  description,
  isshowib,
  isshowmobile,
  amount,
  isfavorite
) VALUES (
  ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateSavedBillPaymentParams struct {
	MerchantID   int32          `json:"merchant_id"`
	CustomerID   int32          `json:"customer_id"`
	SubsciberNo  int32          `json:"subsciber_no"`
	Description  sql.NullString `json:"description"`
	Isshowib     sql.NullString `json:"isshowib"`
	Isshowmobile sql.NullString `json:"isshowmobile"`
	Amount       sql.NullString `json:"amount"`
	Isfavorite   sql.NullString `json:"isfavorite"`
}

func (q *Queries) CreateSavedBillPayment(ctx context.Context, arg CreateSavedBillPaymentParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createSavedBillPayment,
		arg.MerchantID,
		arg.CustomerID,
		arg.SubsciberNo,
		arg.Description,
		arg.Isshowib,
		arg.Isshowmobile,
		arg.Amount,
		arg.Isfavorite,
	)
}

const deleteSavedBillPayment = `-- name: DeleteSavedBillPayment :exec
DELETE FROM saved_bill_payment
WHERE id = ?
`

func (q *Queries) DeleteSavedBillPayment(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteSavedBillPayment, id)
	return err
}

const getSavedBillPayment = `-- name: GetSavedBillPayment :one
SELECT id, merchant_id, customer_id, subsciber_no, description, isshowib, isshowmobile, amount, isfavorite FROM saved_bill_payment
WHERE id = ? LIMIT 1
`

func (q *Queries) GetSavedBillPayment(ctx context.Context, id int32) (SavedBillPayment, error) {
	row := q.db.QueryRowContext(ctx, getSavedBillPayment, id)
	var i SavedBillPayment
	err := row.Scan(
		&i.ID,
		&i.MerchantID,
		&i.CustomerID,
		&i.SubsciberNo,
		&i.Description,
		&i.Isshowib,
		&i.Isshowmobile,
		&i.Amount,
		&i.Isfavorite,
	)
	return i, err
}

const listSavedBillPayment = `-- name: ListSavedBillPayment :many
SELECT id, merchant_id, customer_id, subsciber_no, description, isshowib, isshowmobile, amount, isfavorite FROM saved_bill_payment
ORDER BY id
LIMIT ?
OFFSET ?
`

type ListSavedBillPaymentParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListSavedBillPayment(ctx context.Context, arg ListSavedBillPaymentParams) ([]SavedBillPayment, error) {
	rows, err := q.db.QueryContext(ctx, listSavedBillPayment, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SavedBillPayment{}
	for rows.Next() {
		var i SavedBillPayment
		if err := rows.Scan(
			&i.ID,
			&i.MerchantID,
			&i.CustomerID,
			&i.SubsciberNo,
			&i.Description,
			&i.Isshowib,
			&i.Isshowmobile,
			&i.Amount,
			&i.Isfavorite,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSavedBillPayment = `-- name: UpdateSavedBillPayment :exec
UPDATE saved_bill_payment 
SET merchant_id = ?, customer_id = ?, subsciber_no = ?, description = ?, isshowib = ?, isshowmobile = ?, amount = ?, isfavorite = ?
WHERE id = ?
`

type UpdateSavedBillPaymentParams struct {
	MerchantID   int32          `json:"merchant_id"`
	CustomerID   int32          `json:"customer_id"`
	SubsciberNo  int32          `json:"subsciber_no"`
	Description  sql.NullString `json:"description"`
	Isshowib     sql.NullString `json:"isshowib"`
	Isshowmobile sql.NullString `json:"isshowmobile"`
	Amount       sql.NullString `json:"amount"`
	Isfavorite   sql.NullString `json:"isfavorite"`
	ID           int32          `json:"id"`
}

func (q *Queries) UpdateSavedBillPayment(ctx context.Context, arg UpdateSavedBillPaymentParams) error {
	_, err := q.db.ExecContext(ctx, updateSavedBillPayment,
		arg.MerchantID,
		arg.CustomerID,
		arg.SubsciberNo,
		arg.Description,
		arg.Isshowib,
		arg.Isshowmobile,
		arg.Amount,
		arg.Isfavorite,
		arg.ID,
	)
	return err
}
